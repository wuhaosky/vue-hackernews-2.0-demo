const path = require("path");
const webpack = require("webpack");
const MFS = require("memory-fs");
const clientConfig = require("./webpack.client.config");
const serverConfig = require("./webpack.server.config");

const readFile = (fs, file) => {
    try {
        return fs.readFileSync(
            path.join(clientConfig.output.path, file),
            "utf-8"
        );
    } catch (e) {}
};

module.exports = function setupDevServer(app, cb) {
    let bundle, clientManifest;
    let resolve;
    const readyPromise = new Promise(r => {
        resolve = r;
    });
    const ready = (...args) => {
        resolve();
        cb(...args);
    };

    // 参考文档：https://github.com/glenjamin/webpack-hot-middleware
    // modify client config to work with hot middleware
    clientConfig.entry.app = [
        "webpack-hot-middleware/client",
        clientConfig.entry.app
    ];
    clientConfig.output.filename = "[name].js";
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    );

    // dev middleware
    const clientCompiler = webpack(clientConfig);
    const devMiddleware = require("webpack-dev-middleware")(clientCompiler, {
        // webpack-dev-middleware是一个处理静态资源的中间件(自动编译+全部走内存)
        publicPath: clientConfig.output.publicPath,
        noInfo: true
    });
    app.use(devMiddleware);
    clientCompiler.plugin("done", stats => {
        stats = stats.toJson();
        stats.errors.forEach(err => console.error(err));
        stats.warnings.forEach(err => console.warn(err));
        if (stats.errors.length) return;

        clientManifest = JSON.parse(
            readFile(devMiddleware.fileSystem, "vue-ssr-client-manifest.json")
        );
        if (bundle) {
            ready(bundle, {
                clientManifest
            });
        }
    });

    // hot middleware
    app.use(
        require("webpack-hot-middleware")(clientCompiler, { heartbeat: 5000 })
    ); // webpack-hot-middleware是一个结合webpack-dev-middleware使用的middleware，它可以实现浏览器的无刷新更新（hot reload）

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig);
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err;
        stats = stats.toJson();
        if (stats.errors.length) return;

        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(readFile(mfs, "vue-ssr-server-bundle.json"));
        if (clientManifest) {
            ready(bundle, {
                clientManifest
            });
        }
    });

    return readyPromise;
};
